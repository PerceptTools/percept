#%Module -*- tcl -*-
# find the directory that this module is being loaded from
# and import the sierra_module_utilities from it.
foreach value [split $env(MODULEPATH) :] {
  if { [string last $value $ModulesCurrentModulefile] > -1} {
    lappend auto_path [string range $ModulesCurrentModulefile 0 [string length $value]]
    package require sierra_module_utilities
    break
  }
}

#
set INSTALL_PATH /usr/netpub
set TCL_PATH $INSTALL_PATH/tcl-8.5
set PYTHON_PATH $INSTALL_PATH/python-2.7
set YAML_PATH $INSTALL_PATH/yaml-0.1.4

#
proc ModulesHelp { } {
    global PYTHON_PATH

    # Python writes the version to stderr, so we need to to special magic to display it.
    catch { exec -- $PYTHON_PATH/bin/python -V } msg
    puts stderr "\t$msg for scientific computing"
    puts stderr "\tThis python includes optimized numpy and scipy (MKL), as well as mpi4py, matplotlib, ipython, et al."
}

#
set module_name "[module-info name]"
set module_version "[file tail $module_name]"
set module_dirname "[file dirname $module_name]"
# debug outputs
# puts stderr "module_name=$module_name"
# puts stderr "module_version=$module_version"
# puts stderr "module_dirname=$module_dirname"
module-whatis "Python $module_version for scientific computing"

# Fix up modulepath to remove the trailing colon for this process only.
# This is so 'conflict sierra' doesn't search /sierra
# All conflict statements must come after this statement.
set env(MODULEPATH) [ string trimright "$env(MODULEPATH)" ":" ]

# Is this redhat or something else?
##srk if { [IsRedHat] } {
#    set master [GetMajorSystemVersion]
#    if { $master != 5 } {
#        puts stderr " This modulefile only works for RedHat 5"
#        puts stderr " This machine is $line"
#        exit 1
#        }
#} else {
#    puts stderr " This modulefile only works on RedHat machines (ie, that have a /etc/redhat-master file.)"
#    exit 1
#}

#module-trace on
#module-verbosity on

# other sierra-python modules are probably not a conflict as we prepend all the paths
#conflict $module_dirname

# Set this so that other scripts can tell if we're using the new 
# or old modules structure.
setenv SIERRA_MODULES_VERSION 2
# Set this for the newer sierra-config.
setenv SIERRA_SYSTEM desktop

# If SIERRA_INSTALL_DIR is not set, set it.
if {([array names env SIERRA_INSTALL_DIR] != "SIERRA_INSTALL_DIR") ||
    ([string length $env(SIERRA_INSTALL_DIR)] <= 0)} {
    setenv SIERRA_INSTALL_DIR /projects/sierra/linux/install
}
## setenv SIERRA_SNTOOLS_PATH [GetSierraSntoolsPath master]

# Load the sierra compiler we used to build the python and the MPI
# Note that RedHat 6 and RedHat 5 have different defaults.
#if { $master == 6 } {
#    SubModuleLoad sierra-compiler/gcc/4.4.6
#    # sierra-mpi MUST be loaded after sierra-compiler
#    SubModuleLoad sierra-mpi/openmpi/1.4.5
#} elseif { $master == 5 } {
#    SubModuleLoad sierra-compiler/gcc/4.4.4
#    # sierra-mpi MUST be loaded after sierra-compiler
#    SubModuleLoad sierra-mpi/openmpi/1.4.2
#}

# we conflict with every other sierra-compiler/intel because of shared library paths
# conflict 

# numpy and scipy were built and require Intel shared libraries and MKL
# /sierra/Sntools/extras/compilers/intel/composerxe-2011.7.256/mkl/lib/intel64
#set Year 2011
set Year 2013
#set patch 7.256
set patch 0.079
set Version 12.1

# also the shared runtime libraries from the intel compiler used to build numpy/scipy
set COMPILER_INTEL_PATH /sierra/Sntools/extras/compilers/intel/composerxe-$Year.$patch
if { ! [file isdirectory $COMPILER_INTEL_PATH] } {
  puts stderr " $COMPILER_INTEL_PATH is not a directory! module $module_name will NOT be loaded."
  exit 1
}

#
# Intel runtime libraries,
# we do not need the Intel compiler itself, just specific libraries
#
# TODO: use of PathCheck either here or below will wipe out the OpenMPI from LD_LIBRARY_PATH!
#PathCheck 
prepend-path LD_LIBRARY_PATH $COMPILER_INTEL_PATH/lib/intel64
setenv INTEL_LICENSE_FILE /usr/local/intel/licenses

#
# MKL performance libraries and paths
#
#SubModuleLoad sierra-mkl/$Version-$Year.$patch
module load sierra-mkl/$Version-$Year.$patch

# It is possible that LD_LIBRARY_PATH causes a problem with numpy/scipy, 
# if you have installed MKL and Composer XE in other directories than the standard ones. 
# The only solution I've found that always works is to build Python, NumPy and 
# SciPy inside an environment where you've set the LD_RUN_PATH variable

prepend-path LD_RUN_PATH $COMPILER_INTEL_PATH/lib/intel64:$COMPILER_INTEL_PATH/mkl/lib/intel64

# executable binaries
prepend-path PATH $TCL_PATH/bin
prepend-path PATH $PYTHON_PATH/bin

# shared library dependencies for some python modules
#PathCheck
prepend-path LD_LIBRARY_PATH $YAML_PATH/lib
#PathCheck
prepend-path LD_LIBRARY_PATH $TCL_PATH/lib
#PathCheck
prepend-path LD_LIBRARY_PATH $PYTHON_PATH/lib

